def modules = []
configure(allprojects - project(':modules')) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'

    group = 'adx.audioxd.customenchantmentapi'
    version = '2.4-RELEASE'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile fileTree(dir: 'libs', include: '*.jar')
        testCompile 'junit:junit:4.12'
    }

    if (path.startsWith(":modules:")) {
        println "Found module $name"
        modules << path
    }
}

/* ********************************************************************************* */
/*                         [For the main project]                                    */
/* ********************************************************************************* */

// This is the name of the Project (I know that this is the name of the Jar)
archivesBaseName = 'CustomEnchantmentAPI'
def MainClass = group + '.' + archivesBaseName

// The dependencies
dependencies {
    compile(project(':modules:API')) {
        transitive = false
    }
}

// So it includes the modules in the jar file
jar {
    from files(modules.collect {
        project(it).sourceSets.main.output
    })
}

// To process the plugin.yml file for ease of access
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'plugin.yml'

        expand 'plugin_name': archivesBaseName,
                'plugin_version': version,
                'plugin_main': MainClass
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'plugin.yml'
        exclude '**/*.dev'
    }
}

// This method is for me to make it Easy to create a JavaDoc(.zip)
task javadocZip(type: Zip, dependsOn: javadoc) {
    from "build/docs/javadoc"
    baseName = "CEAPI-javadoc"
    into('/')
}

// Added the JavaDoc as a artifact
artifacts {
    archives(file(javadocZip.archivePath)) {
        name javadocZip.baseName
        type 'zip'
        builtBy javadocZip
    }
}

// Where to upload the output Files
uploadArchives {
    repositories {
        flatDir {
            dirs '/output'
        }
    }
}

/* ********************************************************************************* */
/*                          [For my personal use]                                    */
/* ********************************************************************************* */

// Deletes every file except .gitignore
clean.doFirst {
    if (file("/output").exists()) {
        new File(rootDir, "/output").eachFile() { file ->
            if (!file.getName().equalsIgnoreCase(".gitignore")) {
                delete file.getPath()
            }
        }
    }
}

uploadArchives {
    repositories {
        flatDir {
            dirs '../_extra/_out'
        }
        flatDir {
            dirs '../_extra/run/plugins'
        }
    }
}

// This for generating the gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}